name: OPA Terraform Security Scan and Apply

on: [push]

jobs:
  opa-scan-and-apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install OPA
        run: |
          curl -L -o opa https://github.com/open-policy-agent/opa/releases/download/v0.61.0/opa_linux_amd64
          chmod +x opa
          sudo mv opa /usr/local/bin/opa

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Create OPA Policy
        run: |
          mkdir -p policies
          cat > policies/terraform_security.rego << 'EOL'
          package terraform.security

          # Deny if file permissions are too open
          deny[msg] {
              some i
              input.resource_changes[i].change.after.file_permission == "0666"
              msg := sprintf("File %v has overly permissive permissions (0666)", 
                  [input.resource_changes[i].change.after.filename])
          }

          # Deny if weak passwords are found
          deny[msg] {
              some i
              contains(lower(input.resource_changes[i].change.after.content), "password123")
              msg := "Weak password 'password123' detected"
          }

          # Deny if sensitive information is exposed
          deny[msg] {
              some i
              contains(lower(input.resource_changes[i].change.after.content), "secret_key")
              msg := "Potential secret key exposure detected"
          }
          EOL

      - name: Terraform Init
        run: terraform init



      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Show
        run: terraform show -json tfplan > tfplan.json

      - name: Run OPA Security Scan
        run: |
          # Use jq to parse the OPA output and check for violations
          VIOLATIONS=$(opa eval \
            --format json \
            -d tfplan.json \
            -d policies/terraform_security.rego \
            "data.terraform.security.deny" | \
            jq '.result[0].expressions[0].value | length')
          
          echo "Number of violations: $VIOLATIONS"
          
          if [ "$VIOLATIONS" -gt 0 ]; then
            echo "Security violations detected!"
            opa eval \
              --format pretty \
              -d tfplan.json \
              -d policies/terraform_security.rego \
              "data.terraform.security.deny"
            exit 1
          fi

      - name: Terraform Apply
        if: success()
        run: terraform apply -auto-approve tfplan
